1. What is the main difference between a stack and a queue?

Stacks utilize a last in first out (LIFO) priority system while queues use a first in first out (FIFO) priority system.

2. What are the similarities between stacks and queues?

Both stacks and queues allow access to one element at a time and that another process is not allowed to pick elements from the middle of the stack or queue.

3. Imagine you are an engineer tasked with implementing the UNDO and REDO options in a word processor such as Microsoft Word. Which data structure would you use for each option and why?

UNDO - I would use a LIFO data structure. Since you're undoing your most recent edit, you should make it so that that recent edit is the one being changed.
ie: In the phrase "my name is", since "is" is the last word, the undo process should remove "is". Since "is" is last in the sentence, it would make sense to use a LIFO structure.

REDO - FIFO. This is essentially the opposite of UNDO, hence it would stand to reason I should use FIFO to redo the most recent change.




PROGRAMMING QUESTIONS

1. Given a string, reverse it using a stack. For example, the string "Bloc!" should be converted to "!colB".

function reverse(input) {
  let stack = [];
  let reverse = [];
  for ( let i = 0 ; i <= input.length ; i++ ) {
    stack.push(input[i]);
  }
  while ( stack.length !== 0 || !stack == undefined ) {
    temp = stack.pop();
    reverse.push(temp);
  }
  return reverse;
}

2. Implement the pop method of a stack using one queue. Make a FIFO data structure mirror the functionality of a LIFO data structure.
Since the internal list is not the same as defined in the checkpoint, it may help to rewrite the pseudocode first.

class Stack {
  constructor() {
    this.pop = function(queue) {
      let newQueue = [];
      let elementToRemove = [];

      for ( let i = 0 ; i < queue.length ; i++ ) {
        if ( i == queue.length - 1 ) {
          elementToRemove.push(queue[i]);
        } else {
          newQueue.push(queue[i]);
        }
      }
      return elementToRemove;
    }
  }
}

3. Implement the enqueue and dequeue methods defined in the checkpoint inside your own Queue class.

class Queue {
  constructor() {
    this.elements = [];
  }
  handleEnqueue(input) {
    this.elements.push(input);
  }
  handleDequeue(input) {
    return this.elements.shift();
  }
}
