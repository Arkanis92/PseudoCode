1. What is a hash table?

A type of data structure that stores each value and links it to a name. The names are unique and can be used like an index in an array to look up a specific value.

2. What is hashing?

Hashing is the operation used to convert a string to a numerical index.

3. How does a hash table store data?

A name that is a string is input and linked with a value. The name is then converted to a number through the use of a hashing function.
The hash code in and of itself would take too much memory in an array, so the hashing function then determines a true index by modding the output in relation to the array capacity.
The value is then stored in the newly created index.

4. How are hash tables and objects different?

Hash tables are better in handling cases in which the name corresponds with a native object attribute and provides constant time lookup.
Objects are better with a static number of values of different types.

5. Determine whether you would use a hash table or an object to store each of the following pieces of data:
  A list of pets and their unique names. - Hash table
  The name, age, and the birthday of your best friend. - Object
  The name and location of every company in a given city. - Hash Table
  All of the books checked out from a library by a particular individual. - Hash Table
  The primary and secondary phone numbers for a contact. - Object

6. Build a system that allows a sales associate to enter a customer's name, address, and phone number into the system and look up customers using their phone numbers.
Store this information in a hash table.

let getHash = ( string, max ) => {
  let hash = 0;
  for (let i = 0; i < string.length; i++) {
    hash += string.charCodeAt(i);
  }
  return hash % max;
};

class Database {
  constructor() {
    this.storage = [];
    this.storageCap = 20;
  }

  add(obj) {
    if ( !obj.hasOwnProperty('name') || !obj.hasOwnProperty('address') || !obj.hasOwnProperty('phone') ) {
      console.log("Entries must have a 'phone' value as well as text for 'name' and 'address'.");
      return false;
    } else {
      let key = obj.phone;
      let index = getHash(key, this.storageCap);
      if ( this.storage[index] === undefined ) {
        this.storage[index] = [];
      }
      this.storage[index].push(obj);
    }
  }

  find(obj) {
    let key = obj.phone;
    let index = getHash(key, this.storageCap);
    let result = [];

    if ( !this.storage[index] ) {
      console.log('No results.');
      return;
    }
    this.storage[index].forEach( input => {
      if ( input.phone === obj.phone ) {
        result.push(input);
      }
    })
    return result;
  }
}

let book = new Database();

book.add({
  name: 'John Wick',
  address: '21 Avery RD',
  phone: '123-456-7890'
})
book.add({
  name: 'Jack Smith',
  address: '31 Yreva RD',
  phone: '098-765-4321'
})

console.log(book.find({
  phone: '123-456-7890'
}))

7. Build a system that allows a store owner to track their store's inventory using a hash table for storage.

let getHash = ( string, max ) => {
  let hash = 0;
  for (let i = 0; i < string.length; i++) {
    hash += string.charCodeAt(i);
  }
  return hash % max;
};

class Inventory {
  constructor() {
    this.storage = [];
    this.storageCap = 20;
  }

  add(obj) {
    if ( !obj.hasOwnProperty('item') || !obj.hasOwnProperty('quantity') ) {
      console.log("Entries must have a 'item' value as well as text for 'quantity'.");
      return false;
    } else {
      let key = obj.item;
      let index = getHash(key, this.storageCap);
      if ( this.storage[index] === undefined ) {
        this.storage[index] = [];
      }
      this.storage[index].push(obj);
    }
  }

  find(obj) {
    let key = obj.item;
    let index = getHash(key, this.storageCap);
    let result = [];

    if ( !this.storage[index] ) {
      console.log('No results.');
      return;
    }
    this.storage[index].forEach( input => {
      if ( input.item === obj.item ) {
        result.push(input);
      }
    })
    return result;
  }
}

let list = new Inventory();

list.add({
  item: 'Books',
  quantity: '30'
});

list.add({
  item: 'Pictures',
  quantity: '50'
});

console.log(list.find({
  item: 'Pictures'
}));

8. Build a system that allows digital copies of newspapers to be entered and searched by publisher and publication date. Use hash tables to store the necessary data.

let getHash = ( string, max ) => {
  let hash = 0;
  for (let i = 0; i < string.length; i++) {
    hash += string.charCodeAt(i);
  }
  return hash % max;
};

class Newspapers {
  constructor() {
    this.storage = [];
    this.storageCap = 20;
  }

  addPaper(paper) {
    if ( !paper.hasOwnProperty('publisher') || !paper.hasOwnProperty('date') || !paper.hasOwnProperty('paper') ) {
      console.log("All entries must have a 'publisher' and 'date' value, as well as text for the 'paper'.");
      return false;
    } else {
      let key = paper.publisher + paper.date;
      let index = getHash(key, this.storageCap);
      if ( this.storage[index] === undefined ) {
        this.storage[index] = [];
      }
      this.storage[index].push(paper);
    }
  }

  findPaper( paper ) {
    let key = paper.publisher + paper.date;
    let index = getHash(key, this.storageCap);
    let result = [];

    if ( !this.storage[index] ) {
      console.log('No results found.');
      return;
    }
    this.storage[index].forEach( input => {
      if ( input.publisher === paper.publisher && input.date === paper.date ) {
        result.push(input);
      }
    })
    return result;
  }
}

let newspaper = new Newspapers();
newspaper.addPaper({
  publisher: 'LV Review Journal',
  date: '09-25-1993',
  paper: 'Heavy Traffic due to major road work'
});

console.log(newspaper.findPaper({
  publisher: 'LV Review Journal',
  date: '09-25-1993'
}));
