//Exercises//

1. What are some pros and cons of using linked lists instead of arrays?

PROS - Much less "expensive" than arrays as it does not store the memory address of each element consecutively and therefore, the OS can throw the elements anywhere that's free in its memory.
Additionally, since a linked list is always dynamically instantiated, there will never ben empty placeholders.

CONS - More inefficient to access specific elements within in comparison to an array. As elements are indexed in an array, the developer or OS can instantly access it as long as it knows the index.
Linked lists do not store elements consecutively in memory, so in order to find a specific element, the OS or developer would need to iterate through each element in the list from start to finish until the element in question is found.

2. Come up with a real world example of a linked list.

History section of a web browser. As the history of pages you've visited can get quite large, it'd be more practical to use a linked list than an array.
This works in that each time you visit a new page, a new entry is created and added to the linked list.
Whenever you hit back or next, you iterate back or forwards one place, which makes this operation ideal for a linked list as you do not need to go to a specific index several lines down.


//PROGRAMMING QUESTIONS//

1. The linked list push function should take a value, create a node, and add it to the end of a list.
Below is pseudocode for a push function for a singly linked list. However, there is something wrong with it.
Submit both an explanation of the bug and a functional implementation of the method.

The pseudocode is missing a while loop to iterate down the linked list. Without a loop, the linked list has no way of moving from node to node.
The pseudocode is also not accounting for the fact that the length of the linked list will be expanded each time a new element is pushed.

LinkedList.prototype.push = function(element){
  let node = {
    value: element,
    next: null
  }

  if( !this.head ){
    this.head = node;
  } else {
    currentNode = this.head;
    while( currentNode.next ){
      currentNode = currentNode.next;
    }
    currentNode.next = node;
  }
  this.length ++;
  return node;
}



2. Given an unsorted singly linked list, remove all duplicates from the linked list.

function LinkedList(){
  this.head = null;
  this.length = 0;
}

LinkedList.prototype.push = function(element){
  let node = {
    value: element,
    next: null
  }

  if( !this.head ){
    this.head = node;
  } else {
    currentNode = this.head;
    while( currentNode.next ){
      currentNode = currentNode.next;
    }
    currentNode.next = node;
  }
  this.length ++;
  return node;
}

LinkedList.prototype.removeDuplicates = function(){
 if (!this.head || !this.head.next) {
   return;
   console.log("There are no duplicates");
  }

  let currentNode = this.head;
  while (currentNode != null) {
    let previousNode = currentNode;
    let nextNode = currentNode.next;
    while (nextNode != null) {
      if (currentNode.value == nextNode.value) {
        previousNode.next = nextNode.next;
        this.length --;
      } else {
        previousNode = nextNode;
      }
      nextNode = nextNode.next;
    }
    currentNode = currentNode.next;
  }
  return this;
}



3. Given an unsorted singly linked list, reverse it.

function LinkedList(){
  this.head = null;
  this.length = 0;
}

LinkedList.prototype.push = function(element){
  let node = {
    value: element,
    next: null
  }

  if( !this.head ){
    this.head = node;
  } else {
    currentNode = this.head;
    while( currentNode.next ){
      currentNode = currentNode.next;
    }
    currentNode.next = node;
  }
  this.length ++;
  return node;
}

LinkedList.prototype.reverse = function() {
  let currentNode = this.head;
  let previousNode = null;
  while ( currentNode ) {
    let nextNode = currentNode.next;
    currentNode.next = previousNode;
    previousNode = currentNode;
    currentNode = nextNode;
  }
  return previousNode;
}

let newList = new LinkedList();
newList.push(1);
newList.push(2);
newList.push(3);
newList.push(4);
newList.push(5);
console.log(newList.reverse());
